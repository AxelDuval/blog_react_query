{"ast":null,"code":"var _jsxFileName = \"/home/axel/Bureau/React Query/udemy-REACT-QUERY/base-blog-em/src/PostDetail.jsx\",\n    _s = $RefreshSig$();\n\nimport { isError, useQuery } from 'react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nasync function fetchComments(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`);\n  return response.json();\n}\n\nasync function deletePost(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/postId/${postId}`, {\n    method: \"DELETE\"\n  });\n  return response.json();\n}\n\nasync function updatePost(postId) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/postId/${postId}`, {\n    method: \"PATCH\",\n    data: {\n      title: \"REACT QUERY FOREVER!!!!\"\n    }\n  });\n  return response.json();\n}\n\nexport function PostDetail({\n  post\n}) {\n  _s();\n\n  const {\n    comment,\n    isLoading,\n    error,\n    isError\n  } = useQuery('comments', fetchComments);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 22\n  }, this);\n  if (isError) return;\n\n  /*#__PURE__*/\n  _jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Something went wrong !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        color: \"blue\"\n      },\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Update title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), data.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [comment.email, \": \", comment.body]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(PostDetail, \"Vt/bQjQI7z8gxsiid5odvcXVETU=\", false, function () {\n  return [useQuery];\n});\n\n_c = PostDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetail\");","map":{"version":3,"sources":["/home/axel/Bureau/React Query/udemy-REACT-QUERY/base-blog-em/src/PostDetail.jsx"],"names":["isError","useQuery","fetchComments","postId","response","fetch","json","deletePost","method","updatePost","data","title","PostDetail","post","comment","isLoading","error","color","body","map","email","id"],"mappings":";;;AAAA,SAAQA,OAAR,EAAiBC,QAAjB,QAAgC,aAAhC;;;;AAEA,eAAeC,aAAf,CAA6BC,MAA7B,EAAqC;AACnC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,wDAAuDF,MAAO,EADrC,CAA5B;AAGA,SAAOC,QAAQ,CAACE,IAAT,EAAP;AACD;;AAED,eAAeC,UAAf,CAA0BJ,MAA1B,EAAkC;AAChC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,+CAA8CF,MAAO,EAD5B,EAE1B;AAAEK,IAAAA,MAAM,EAAE;AAAV,GAF0B,CAA5B;AAIA,SAAOJ,QAAQ,CAACE,IAAT,EAAP;AACD;;AAED,eAAeG,UAAf,CAA0BN,MAA1B,EAAkC;AAChC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,+CAA8CF,MAAO,EAD5B,EAE1B;AAAEK,IAAAA,MAAM,EAAE,OAAV;AAAmBE,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAzB,GAF0B,CAA5B;AAIA,SAAOP,QAAQ,CAACE,IAAT,EAAP;AACD;;AAED,OAAO,SAASM,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA8B;AAAA;;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,KAAtB;AAA6BhB,IAAAA;AAA7B,MAAyCC,QAAQ,CAAC,UAAD,EAAaC,aAAb,CAAvD;AACA,MAAGa,SAAH,EAAc,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACd,MAAGf,OAAH,EAAY;;AACZ;AAAA;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,gBAAIgB;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;;AAIE,sBACE;AAAA,4BACE;AAAI,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAX;AAAA,gBAA+BJ,IAAI,CAACF;AAApC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,oBAE0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF1B,eAGE;AAAA,gBAAIE,IAAI,CAACK;AAAT;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGR,IAAI,CAACS,GAAL,CAAUL,OAAD,iBACR;AAAA,iBACGA,OAAO,CAACM,KADX,QACoBN,OAAO,CAACI,IAD5B;AAAA,OAASJ,OAAO,CAACO,EAAjB;AAAA;AAAA;AAAA;AAAA,YADD,CALH;AAAA,kBADF;AAaD;;GArBeT,U;UAC+BX,Q;;;KAD/BW,U","sourcesContent":["import {isError, useQuery} from 'react-query'\n\nasync function fetchComments(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n  );\n  return response.json();\n}\n\nasync function deletePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"DELETE\" }\n  );\n  return response.json();\n}\n\nasync function updatePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"PATCH\", data: { title: \"REACT QUERY FOREVER!!!!\" } }\n  );\n  return response.json();\n}\n\nexport function PostDetail({ post }) {\nconst { comment, isLoading, error, isError } = useQuery('comments', fetchComments);\nif(isLoading) return <h3>Loading...</h3>\nif(isError) return \n<>\n<h3>Something went wrong !</h3>\n<p>{error}</p>\n</>\n  return (\n    <>\n      <h3 style={{ color: \"blue\" }}>{post.title}</h3>\n      <button>Delete</button> <button>Update title</button>\n      <p>{post.body}</p>\n      <h4>Comments</h4>\n      {data.map((comment) => (\n        <li key={comment.id}>\n          {comment.email}: {comment.body}\n        </li>\n      ))}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}